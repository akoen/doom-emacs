#+TITLE: Alex Koen's Doom Emacs Configuration
#+AUTHOR: Alex Koen
#+EMAIL: arw.koen@gmail.com

* Init
** Personal Information
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Alex Koen"
      user-mail-address "arw.koen@gmail.com")
#+end_src

** Theme
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-one)
#+end_src

** Font

Set default fonts

#+begin_src emacs-lisp :tangle yes
(setq doom-font "Fira Code 10"
      doom-variable-pitch-font "Input Sans Narrow 10")
#+end_src


Scale to display

#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil :height 90)
#+end_src

#+RESULTS:

** Text wrapping
#+begin_src emacs-lisp :tangle yes
(global-visual-line-mode +1)
(auto-fill-mode -1)
(remove-hook 'org-mode-hook #'auto-fill-mode) ;;CONFIRM
(remove-hook 'text-mode-hook #'auto-fill-mode) ;;CONFIRM
#+end_src

** Miscellaneous
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
(global-auto-revert-mode +1)
#+end_src

** Directories
#+begin_src emacs-lisp :tangle yes
(defconst my/drive-dir "~/Drive/"
  "The root Drive directory, where all documents are stored.")

(defconst my/archive-dir (concat my/drive-dir "Archive/")
  "Archive directory")

#+end_src
* Keybinds

#+begin_src emacs-lisp :tangle yes
(map! :leader
      "f t" #'find-in-dotfiles)
#+end_src
* Functions - Move back to place
** Browse dotfiles

Open a file in my dotfiles directory.

#+begin_src emacs-lisp :tangle yes
(defun find-in-dotfiles ()
  "Open a file somewhere in ~/.dotfiles via a fuzzy filename search."
  (interactive)
  (doom-project-find-file (expand-file-name "~/.dotfiles")))
#+end_src

** Autosort

Automatically sort org buffers by property

#+begin_src emacs-lisp :tangle yes
(defun my/org-entry-has-subentries ()
  "Any entry with subheadings"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (save-excursion
      (org-back-to-heading)
      (forward-line 1)
      (when (< (point) subtree-end)
	(re-search-forward "^\*+ " subtree-end t)))))

(defun my/org-entry-sort-by-property nil
  (let ((property (org-entry-get (point) "SORT" 'INHERIT)))
    (when (and (not (seq-empty-p property))
	       (my/org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property) nil nil nil)))
  (let ((property_second (org-entry-get (point) "SORT_AFTER" 'INHERIT)))
    (when (and (not (seq-empty-p property_second))
	       (my/org-entry-has-subentries))
      (funcall #'org-sort-entries nil (string-to-char property_second) nil nil nil))))

(defun my/org-buffer-sort-by-property (&optional MATCH)
  (interactive)
  (org-map-entries #'my/org-entry-sort-by-property MATCH 'file)
  (org-set-startup-visibility))

(add-hook 'org-mode-hook #'my/org-buffer-sort-by-property)
#+end_src
* Packages
** =org-mode=
#+begin_src emacs-lisp :tangle yes
(after! org
  (set-popup-rule! "^\\*Org Agenda" :regexp t :size 0.6 :ignore t) ;; remove ignore to make popup
  (setq org-treat-S-cursor-todo-selection-as-state-change nil
        org-directory (concat my/drive-dir "Tasks/")
        org-hide-emphasis-markers t
        org-id-locations-file (concat org-directory ".orgids")
        org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
        org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))))

#+end_src

*** Capture

#+begin_src emacs-lisp :tangle yes
(after! org-capture
(setq org-capture-templates
      `(("t" "Todo" entry (file "~/Drive/Tasks/refile.org")
         "* TODO %?")
        ("j" "Journal" entry
         (file+datetree+prompt ,(concat "~/Drive/Areas/Journaling/" (format-time-string "%Y") "/" (format-time-string "%Y") ".org"))
         "* %?")
        ("r" "Resonance" entry
         (file+datetree+prompt "~/Drive/Tasks/resonance.org")
         "* res")
        ("p" "Protocol" entry (file "~/Drive/Tasks/refile.org")
         "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
        ("L" "Protocol Link" entry (file "~/Drive/Tasks/refile.org")
         "%(org-web-tools--url-as-readable-org \"%:link\")" :immediate-finish t))))
#+END_SRC

*** Agenda

#+begin_src emacs-lisp :tangle yes
(after! org-agenda
(setq org-deadline-warning-days 7
      org-agenda-files '("~/Drive/Tasks")))
#+end_src


*** =org-super-agenda=
#+begin_src emacs-lisp :tangle yes
(use-package! org-super-agenda
  :init
  (setq org-super-agenda-groups '((:name "High Priority"
                                         :time-grid t
                                         :priority "A")
                                  (:name "Habits"
                                         :time-grid t
                                         :tag "habit")
                                  (:name "Personal"
                                         :time-grid t
                                         :and (:tag "personal"
                                                    :not (:tag "habit")))
                                  (:name "School"
                                         :time-grid t
                                         :file-path "school"))
        org-super-agenda-header-map (make-sparse-keymap)) ;; removes custom keybindings which are in opposition to evil-org

  :config
  (org-super-agenda-mode))
#+end_src

** =mu4e=

Everything must be Emacs

#+begin_src emacs-lisp :tangle yes
(use-package! mu4e
  :ensure-system-package mu

  :init
  (set-email-account! "arw.koen@gmail.com"
                      '((mu4e-sent-folder       . "/gmail/Sent Mail")
                        (mu4e-drafts-folder     . "/gmail/Drafts")
                        (mu4e-trash-folder      . "/gmail/Trash")
                        (mu4e-refile-folder     . "/gmail/All Mail")
                        (mu4e-compose-signature . "---\nHenrik Lissner")
                        (smtpmail-debug-info    . t)
                        (smtpmail-smtp-server   . "smtp.gmail.com")
                        (smtpmail-default-smtp-server . "smtp.gmail.com")
                        (smtpmail-smtp-service  . 587)
                        (smtpmail-smtp-user     . "arw.koen")
                        (smtpmail-stream-type   . starttls))
                      t))
#+end_src


